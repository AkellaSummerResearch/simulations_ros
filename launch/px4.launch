<?xml version="1.0"?>
<launch>
    <!-- vehicle pose -->
    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="R" default="0"/>
    <arg name="P" default="0"/>
    <arg name="Y" default="0"/>
    <!-- vehicle model and world -->
    <arg name="est" default="ekf2"/>
    <arg name="vehicle" default="iris"/>
    <arg name="world" default="$(find simulations_ros)/worlds/sim.world"/>
    <!-- <arg name="sdf" default="$(find mavlink_sitl_gazebo)/models/$(arg vehicle)/$(arg vehicle).sdf"/> -->
    <arg name="rcS" default="$(find px4)/posix-configs/SITL/init/$(arg est)/$(arg vehicle)"/>
    <!-- gazebo configs -->
    <arg name="gui" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="paused" default="false"/>
    <arg name="respawn_gazebo" default="false"/>
    <!-- PX4 configs -->
    <arg name="interactive" default="true"/>
    <!-- Gazebo sim -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(arg world)"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    </include>

     <!-- MAVROS configs -->
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="respawn_mavros" default="false"/>
    <!-- MAVROS -->
    <include file="$(find mavros)/launch/px4.launch">
        <!-- GCS link is provided by SITL -->
        <arg name="gcs_url" value=""/>
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="respawn_mavros" value="$(arg respawn_mavros)"/>
    </include>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Arguments for rotating camera frame -->
    <arg name="pi/2" value="1.5707963267948966" />
    <arg name="angle" value="2.0944" />
    <arg name="optical_rotate" value="0 0 0.1. -$(arg pi/2) 0 -$(arg angle)" />
    
    <node pkg="tf" type="static_transform_publisher" name="camera_link"
        args="$(arg optical_rotate) base_link camera_link 100" />  
    
    <!-- Rotate the camera frame. -->
    <node pkg="tf" type="static_transform_publisher" name="openni_camera_link"
        args="$(arg optical_rotate) base_link openni_camera_link 100" />  

    <node pkg="tf" type="static_transform_publisher" name="realsense"
        args="0 0 3 -$(arg pi/2) 0 -$(arg pi/2) map camera_color_optical_frame 100" />  
    

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Tf server for updating vehicles tf's -->
    <node pkg="tf_publisher" type="tf_publisher" name="tf_publisher" output="screen" />

    <!-- <rosparam param="QuadList"> ["valkyrie", "phoenix"] </rosparam> -->


    <!-- View camera image -->
    <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
        <remap from="image" to="/webcam/image_raw" />
    </node>

</launch>